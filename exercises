
//odd finction
(define (odd?? x) (=(remainder x 2)1))
//declaration of even function using odd function
(define (even?? x)(not(odd? x)))
//checking mark
(define(grade x)
  (cond ((>= x 180) 6)
        ((>= x 140) 5)
        ((>= x 100) 4)
        ((>= x 60) 3)
        (else 2)))
 //factorial using recursion       
(define (fact n)
  (if (= n 1)
      1
      (* n (fact(- n 1)))))
      
//fibonacci using recursion
(define (fib n)
  (if (<= n 1)
      n
      (+ (fib(- n 1)) (fib (- n 2)) )))
      
//sum of interval
(define (sum a b)
  (if (> a b)
      0
  (+ a (sum (+ a 1) b))))
  
//square function definition
(define (square x)(* x x))

//fast pow-recursion
(define (fast-pow x n)
  (if (= n 0)
      1
      (if (even?? n)
          (square(fast-pow x (/ n 2)))
          (* x (fast-pow x (- n 1))))))

(define (bool-to-num b)
  (if b 1 0))


(define (digit-occurance d n)
  (if (< n 10)
      (bool-to-num (= n d))
      (+ (bool-to-num (= d (remainder n 10)))
         (digit-occurance d (quotient n 10)))))
         
         
//number of digits func-recursion
(define (count-digits n)
  (if (< n 10)
      1
      (+ 1 (count-digits(/ n 10)))))

//count-digits iterative recursion
(define (count-digit n)
  (define (iter count number)
    (if (< number 10)
        count
        (iter (+ count 1) (/ number 10))))
  (iter 1 (abs n)))

//reverse-digits iterative recursion
(define (reverse-digits n)
  (define (iter number result)
    (if (= number 0)
        result
        (iter (quotient number 10)(+ (* result 10)(remainder number 10)))))
  (iter n 0))

//check for palindrome using the reverse-digits function
(define (palindrome? n)
  (if (< n 10)
      1
      (= n (reverse-digits n))))



    







