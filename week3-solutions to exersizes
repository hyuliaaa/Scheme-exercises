(define (sum a b  term next)
  (if (> a b)
      0
      (+ (term a) (sum (next a) b term next))))
(define (fact n)
  (if (= n 0)
      1
      (* n(fact(- n 1)))))

(define (1+ n)(+ 1 n))

(define (my-exp m x)
  (sum 0 m
       (lambda (i) (/ (expt x i) (fact i)))
         1+))

(define (my-sin m x)
  (sum 0 m
       (lambda (i) (/ (* (expt -1 i) (expt x (+ (* 2 i) 1))) (fact(+(* 2 i) 1))))
       1+))

(define (my-cos m x)
  (sum 0 m
       (lambad (i)(/ (* (expt -1 i) (expt x (* 2 i))) (fact (* 2 i))))
       1+))

(define (product a b term next)
  (if (> a b)
      1
      (* (term a) (product (nextt a) b term next))))

(define (sprod p x)
  (product 1 p
           (lambda (i) (my-sin i x))
           1+))

(define (accumulate op nv a b term next)
  (if (> a b)
      nv
      (op (term a) (accumulate op nv (next a) b term next))))

(define (accumulate-i op nv a b term next)
  (if (> a b)
      nv
      (accumulate i op (op nv (term a)) (term a) b term next)))

(define (fact n)
  (accumulate * 1 1 n (lambda (x) x) 1+))

(define (sum a b term next)
  (accumulate + 0 a b term  next))

(define (product a b term next)
  (accumulate * 1 a b term next))

(define (exists? pred? a b)
(accumulate (lambda (x y) (or x y))
            #f
            a
            b
            pred?
            1+))

(define (forall? pred? a b)
  (accumulate (lambda (x y)(and x y))
                #t
                a
                b
                pred?
                1+))

(define (count-pred pred? a b next)
  (accumulate + 0
              a
              b
              (lambda (i) (if (pred? i) 1 0))
              next))



