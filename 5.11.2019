(define (evenn? x) (= (modulo x 2) 0))

(define (fact n)
  (if (= n 0)
      1
      (* n (fact(- n 1)))))

(define (fib n)
  (if (= n 0)
      0
      (if (= n 1)
          1
          (+ (fib (- n 1))(fib(- n 2))))))

(define (sum a b)
  (if (> a b)
      0
      (+ a (sum (+ a 1) b))))

(define (pow x n)

  (if (= n 0)

      1

      (* x (pow x (- n 1)))))

(define (bool-to-num b)
  (if b 1 0))


(define (count-digits n)
  (if (< n 0)
      (count-digits (- n))
      (if (< n 10)
          1
          (+ 1 (count-digits (quotient n 10))))))


(define (reverse-digits n)
  (define (iter number result)
    (if (= number 0)
        result
        (iter (quotient number 10)(+ (* result 10)(remainder number 10)))))
  (iter n 0))

(define (palyndrome? n)
  (= n (reverse-digits n)))

(define (sum-digits n)
  (if (= n 0)
      0
      (+ (remainder n 10) (sum-digits (quotient n 10)))))

(define (bin-to-dec n)
  (if (< n 10)
      n
      (+ (* 2 (bin-to-dec (quotient n 10))) (remainder n 10))))

(define (dec-to-bin n)
  (if (< n 2)
      n
      (+ (* 10 (dec-to-bin (quotient n 2)))
         (remainder n 2))))

(define (divides? k n)
  (= (remainder n k) 0))

(define (suma k)
  (if (> k 100)
      0
      (+ (* k k)(sum(+ k 1)))))

(define (sum a b term next)
  (if(> a b)
     0
     (+ (term a)(sum(next a) b term next))))

(define (product a b term next)
  (if (> a b)
      1
      (* (term a)(product (next a ) b term next))))

(define (accumulate op nv a b term next)
  (if(> a b)
     nv
     (op (term a)(accumulate op nv (next a) term next))))


(define (accumulate-i op nv a b term next)
  (if (> a b)
      nv
      (accumulate-i op (op nv (term a)) (next a) b term next)))
