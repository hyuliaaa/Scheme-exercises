(define (sum-step a b next)
  (if (> a b)
      0
      (+ a (sum-step (next a) b next))))

(define (1+ x)(+ 1 x))

(define (sum-term a b term)
  (if (> a b)
      0
      (+ (term a)(sum-term (+ a 1) b term))))

(define (sq x)(* x x))

(define (sum a b term next)
  (if(> a b)
     0
     (+ (term a)(sum(next a) b term next))))

(define (my-sin m x)
  (sum 0 m (lambda (i) (/ (* (expt -1 i) (expt x (+ (* 2 i) 1))) (fact(+ (* 2 i) 1))))
             1+))

(define (fact n)
  (if (= n 0)
      1
      (* n (fact (- n 1)))))


(define (my-cos m x)
  (sum 0 m
       (lambda(i) (/ (* (expt -1 i)(expt x (* 2 i))) (fact (* 2 n))))
       1+))

(define (product a b term next)
  (if (> a b)
      1
      (* (term a) (product (next a) b term next))))

(define (sprod p x)
  (product 1 p (lambda (i) (my-sin i x) ) 1+))

(define (accumulate op nv a b term next)
 (if (> a b)
     nv
     (op (term a) (accumulate op nv (next a) b term next))))

(define (accumulate-i op nv a b term next)
  (if (> a b)
      nv
      (accumulate-i op (op nv (term a)) (next a )b term next)))

(define (fact n)
  (accumulate * 1 1 n (lambda (i) i) 1+))

(define (sum a b term next)
  (accumulate + 0 a b term next))
